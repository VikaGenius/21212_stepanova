#pragma once
#include <string>

typedef std::string Key;

struct Value {
	unsigned age = 0;
	unsigned weight = 0; 
	Value();
	Value(unsigned a, unsigned w);
	~Value() = default;
	friend bool operator==(const Value& a, const Value& b);
};

class FlatMap
{
public:	
	//Constructor
	//Creates an object, allocates memory
	FlatMap();
	//Destructor
	//Called automatically when the object's scope ends. Frees up memory
	~FlatMap();
	//Copy constructor
	//Initializes the new class fields with the class fields passed as input
	FlatMap(const FlatMap& b);
	//The move constructor allows you to move resources owned by an rvalue object to an lvalue without copying
	FlatMap(FlatMap&& b) noexcept;

	// Swap the values ​​of two FlatMap
	void swap(FlatMap& b);

	//Assignment operator for this class
	FlatMap& operator=(const FlatMap& b);
	//Assignment operator for this class, accepts an rvalue as input
	FlatMap& operator=(FlatMap&& b) noexcept;

	// Clears the container
	void clear();

	// Removes an element with the given key
	//O(n)
	bool erase(const Key& k);

	// Inserting an element in container. Returns the success of the insert. 
	//Uses binary search
	//O(n)
	bool insert(const Key& k, const Value& v);

	//Append key by index
	void appendKey(const Key& k, const Value& v, size_t index);

	// Checking if a value exists for a given key.
	//O(log(n))
	bool contains(const Key& k) const;

	// Returns a value by key. 
	//If the container does not have a value for that key, insert the value 
	//generated by the default constructor into the container and return a reference to it.
	Value& operator[](const Key& k);

	// Returns a value by key. Throws an exception on failure.
	Value& at(const Key& k);
	//Returns a constant value
	const Value& at(const Key& k) const;

	//Returns the size of the container
	size_t size() const;
	//Checks if the container is empty
	bool empty() const;

	//Comparison operators for this class
	friend bool operator==(const FlatMap& a, const FlatMap& b);
	friend bool operator!=(const FlatMap& a, const FlatMap& b);

private:
	struct Container {
		Key key;
		Value value;
		//friend bool operator==(const FlatMap::Container& a, const FlatMap::Container& b);
	};
	friend bool operator==(const FlatMap::Container& a, const FlatMap::Container& b);
	//Allocates additional memory for an already created dynamic array
	void memoryExpansion();

	//Binary search. Determines by key where the element should be in the container
	//O(log(n))
	size_t binarySearch(const Key& k) const;


	Container* container = nullptr;
	size_t size_c = 0ull;
	size_t capacity = 0ull;
};


